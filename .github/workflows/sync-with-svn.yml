name: Sync Git and SVN Repositories
on: push
jobs:
  sync_git_svn:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install SVN
        run: sudo apt-get update && sudo apt-get install -y subversion rsync

      - name: Configure SVN credentials
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
        run: |
          mkdir -p ~/.subversion
          cat > ~/.subversion/servers << EOF
          [global]
          store-passwords = yes
          store-plaintext-passwords = yes
          EOF
          mkdir -p ~/.subversion/auth/svn.simple

      - name: Checkout SVN repository
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          SVN_REPO_URL: ${{ secrets.SVN_REPO_URL }}
        run: |
          mkdir -p svn_repo
          svn checkout "$SVN_REPO_URL" svn_repo \
            --non-interactive \
            --trust-server-cert \
            --config-option servers:global:store-plaintext-passwords=yes \
            --config-option servers:global:store-passwords=yes \
            --config-option config:auth:password-stores=simple \
            --username "$SVN_USERNAME" \
            --password "$SVN_PASSWORD"

      - name: Setup ignore patterns
        run: |
          # Create .gitignore if it doesn't exist
          if [ ! -f .gitignore ]; then
            touch .gitignore
          fi
          
          # Create .svnignore if it doesn't exist
          if [ ! -f svn_repo/.svnignore ]; then
            touch svn_repo/.svnignore
          fi
          
          # Ensure standard ignore patterns are present
          for pattern in ".svn/" ".git/" ".github/" ".hooks/"; do
            if ! grep -q "^${pattern}$" .gitignore; then
              echo "$pattern" >> .gitignore
            fi
            if ! grep -q "^${pattern}$" svn_repo/.svnignore; then
              echo "$pattern" >> svn_repo/.svnignore
            fi
          done
          
          # Add .svnignore to Git ignore
          if ! grep -q "^.svnignore$" .gitignore; then
            echo ".svnignore" >> .gitignore
          fi
          
          # Configure SVN to use the ignore file
          cd svn_repo
          svn propset svn:ignore -F .svnignore .
          cd ..

      - name: Sync changes from SVN to Git
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Function to check if a file should be ignored
          check_ignore() {
            local file="$1"
            local base_dir="$2"
            local ignore_file="$3"
            
            # Normalize path
            file="${file#./}"
            
            # Check if file matches any ignore pattern
            if [ -f "$base_dir/$ignore_file" ]; then
              while IFS= read -r pattern; do
                # Skip empty lines and comments
                [[ -z "$pattern" || "$pattern" == \#* ]] && continue
                
                # Remove trailing slash for directory patterns
                pattern="${pattern%/}"
                
                # Check if file matches the pattern
                if [[ "$file" == $pattern* || "$file" == *"/$pattern"* ]]; then
                  return 0
                fi
              done < "$base_dir/$ignore_file"
            fi
            return 1
          }

          # Sync SVN to Git
          cd svn_repo
          svn update --non-interactive --trust-server-cert \
            --username "$SVN_USERNAME" --password "$SVN_PASSWORD"
          
          find . -type f | while IFS= read -r file; do
            # Skip .svn directories and ignored files
            if [[ "$file" == */.svn/* ]] || check_ignore "$file" "." ".svnignore"; then
              continue
            fi
            
            file="${file#./}"
            if [ -f "$file" ]; then
              if [ ! -f "../$file" ] || ! cmp -s "$file" "../$file"; then
                echo "Syncing $file from SVN to Git"
                mkdir -p "$(dirname "../$file")"
                cp "$file" "../$file"
                git -C .. add "$file"
              fi
            fi
          done
          
          cd ..
          if ! git diff --staged --quiet; then
            git config --global user.email "github-action@users.noreply.github.com"
            git config --global user.name "GitHub Action"
            git commit -m "Sync changes from SVN to Git"
            git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
            git push
            echo "Changes from SVN committed and pushed to Git"
          else
            echo "No changes from SVN to sync to Git"
          fi

      - name: Sync Git to SVN
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
        run: |
          # Sync Git to SVN
          git ls-files | while read -r file; do
            # Skip ignored files
            if check_ignore "$file" "." ".gitignore"; then
              continue
            fi
            
            if [ ! -f "svn_repo/$file" ] || ! cmp -s "$file" "svn_repo/$file"; then
              echo "Syncing $file from Git to SVN"
              mkdir -p "svn_repo/$(dirname "$file")"
              cp "$file" "svn_repo/$file"
            fi
          done
          
          # Commit changes to SVN
          cd svn_repo
          # Add all new files, but respect svn:ignore
          svn status | grep '^?' | cut -c9- | while IFS= read -r file; do
            if ! check_ignore "$file" "." ".svnignore"; then
              svn add --parents "$file"
            fi
          done
          
          if [[ -n "$(svn status)" ]]; then
            svn commit --non-interactive --trust-server-cert \
              --username "$SVN_USERNAME" --password "$SVN_PASSWORD" \
              -m "Sync changes from Git to SVN"
            echo "Changes pushed to SVN"
          else
            echo "No changes to commit to SVN"
          fi