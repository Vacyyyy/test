name: Sync Git and SVN Repositories

on: [push, workflow_dispatch]

env:
  SVN_REPO_URL: ${{ secrets.SVN_REPO_URL }}
  SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
  SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}

jobs:
  sync_repositories:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion rsync
          python -m pip install svn

      - name: Prepare sync configuration
        id: prep
        run: |
          # Create sync configuration file
          cat > sync-config.json << EOF
          {
            "ignore_patterns": [
              ".svn/",
              ".git/",
              ".github/",
              ".gitignore",
              ".svnignore",
              "*.pyc",
              "__pycache__",
              "node_modules/",
              "sync-config.json"
            ]
          }
          EOF

          # Create sync helper script
          cat > sync_helper.py << 'EOF'
          import os
          import sys
          import json
          import subprocess
          import fnmatch
          from pathlib import Path

          def load_config():
              with open('sync-config.json', 'r') as f:
                  return json.load(f)

          def should_ignore(path, ignore_patterns):
              path_str = str(path)
              return any(fnmatch.fnmatch(path_str, pattern) for pattern in ignore_patterns)

          def run_command(cmd, check=True):
              try:
                  result = subprocess.run(
                      cmd,
                      check=check,
                      capture_output=True,
                      text=True
                  )
                  return result
              except subprocess.CalledProcessError as e:
                  print(f"Error executing command: {' '.join(cmd)}")
                  print(f"Error output: {e.stderr}")
                  if check:
                      sys.exit(1)
                  return e

          def sync_directories(source_path, target_path, ignore_patterns):
              source_path = Path(source_path)
              target_path = Path(target_path)
              
              # Create target directory if it doesn't exist
              target_path.mkdir(parents=True, exist_ok=True)
              
              # Walk through all files in source
              for source_file in source_path.rglob('*'):
                  if not source_file.is_file():
                      continue
                      
                  # Skip ignored files
                  if should_ignore(source_file, ignore_patterns):
                      continue
                      
                  # Calculate relative path
                  relative_path = source_file.relative_to(source_path)
                  target_file = target_path / relative_path
                  
                  # Create parent directories if they don't exist
                  target_file.parent.mkdir(parents=True, exist_ok=True)
                  
                  # Compare and copy if different
                  if not target_file.exists() or not files_are_identical(source_file, target_file):
                      print(f"Syncing: {relative_path}")
                      target_file.write_bytes(source_file.read_bytes())
                      yield relative_path

          def files_are_identical(file1, file2):
              try:
                  return file1.read_bytes() == file2.read_bytes()
              except FileNotFoundError:
                  return False

          def sync_git_to_svn(git_path, svn_path, config):
              ignore_patterns = config['ignore_patterns']
              
              # Sync files from Git to SVN
              for changed_file in sync_directories(git_path, svn_path, ignore_patterns):
                  svn_file = Path(svn_path) / changed_file
                  run_command(['svn', 'add', str(svn_file), '--parents', '--force'], check=False)
              
              # Handle deletions in SVN
              for svn_file in Path(svn_path).rglob('*'):
                  if not svn_file.is_file() or should_ignore(svn_file, ignore_patterns):
                      continue
                      
                  relative_path = svn_file.relative_to(svn_path)
                  git_file = Path(git_path) / relative_path
                  
                  if not git_file.exists():
                      print(f"Deleting from SVN: {relative_path}")
                      run_command(['svn', 'rm', str(svn_file)], check=False)

          def sync_svn_to_git(svn_path, git_path, config):
              ignore_patterns = config['ignore_patterns']
              changed_files = set()
              
              # Sync files from SVN to Git
              for changed_file in sync_directories(svn_path, git_path, ignore_patterns):
                  changed_files.add(changed_file)
              
              # Handle deletions in Git
              for git_file in Path(git_path).rglob('*'):
                  if not git_file.is_file() or should_ignore(git_file, ignore_patterns):
                      continue
                      
                  relative_path = git_file.relative_to(git_path)
                  svn_file = Path(svn_path) / relative_path
                  
                  if not svn_file.exists():
                      print(f"Deleting from Git: {relative_path}")
                      git_file.unlink()
                      changed_files.add(relative_path)
              
              return changed_files

          if __name__ == '__main__':
              if len(sys.argv) != 4:
                  print("Usage: sync_helper.py <direction> <source_path> <target_path>")
                  sys.exit(1)

              direction = sys.argv[1]
              source_path = sys.argv[2]
              target_path = sys.argv[3]
              
              config = load_config()
              
              if direction == 'git-to-svn':
                  sync_git_to_svn(source_path, target_path, config)
              elif direction == 'svn-to-git':
                  sync_svn_to_git(source_path, target_path, config)
              else:
                  print(f"Unknown direction: {direction}")
                  sys.exit(1)
          EOF

          chmod +x sync_helper.py

      - name: Configure SVN
        run: |
          mkdir -p ~/.subversion
          cat > ~/.subversion/servers << EOF
          [global]
          store-passwords = yes
          store-plaintext-passwords = yes
          ssl-trust-default-ca = yes
          EOF

      - name: Checkout SVN repository
        run: |
          svn checkout "$SVN_REPO_URL" svn_repo \
            --non-interactive \
            --trust-server-cert \
            --username "$SVN_USERNAME" \
            --password "$SVN_PASSWORD"
        continue-on-error: false

      - name: Sync SVN to Git
        run: |
          python sync_helper.py svn-to-git "svn_repo" "."
          
          # Configure Git
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          
          # Add all changes including deletions
          git add -A
          
          # Commit if there are changes
          if ! git diff --staged --quiet; then
            git commit -m "Sync changes from SVN to Git [skip ci]"
            git push
          else
            echo "No changes to sync from SVN to Git"
          fi

      - name: Sync Git to SVN
        run: |
          python sync_helper.py git-to-svn "." "svn_repo"
          
          # Commit changes if any
          cd svn_repo
          if [ -n "$(svn status)" ]; then
            svn commit \
              --non-interactive \
              --trust-server-cert \
              --username "$SVN_USERNAME" \
              --password "$SVN_PASSWORD" \
              -m "Sync changes from Git to SVN"
          else
            echo "No changes to sync from Git to SVN"
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -f sync_helper.py sync-config.json
          rm -rf svn_repo